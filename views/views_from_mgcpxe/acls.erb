<div class="row wrapper border-bottom white-bg page-heading">
                <div class="col-lg-10">
                    <h2><span class="fa fa-shield"></span> ACLs Strategy</h2>
                    <ol class="breadcrumb">
                        <li>
                            <a href="/web">Home</a>
                        </li>
                        <li>
                            <a>Admin</a>
                        </li>
                        <li class="active">
                            <strong>ACLs Strategy</strong>
                        </li>
                    </ol>
                </div>
                <div class="col-lg-2">
                </div>
            </div>
        <div class="wrapper wrapper-content animated fadeInRight">
            <div class="row">
                <div class="col-lg-12">
                <div class="ibox float-e-margins">
	<div class="ibox-title">
                            <h5>ACLs Strategy</h5>
                            <div class="ibox-tools">
                                <a class="collapse-link">
                                    <i class="fa fa-chevron-up"></i>
                                </a>
                            </div>
                        </div>
                    <div class="ibox-content">
<textarea id="code1">
# BEFORE FILTER FOR WEB USAGE
before do
	content_type :html
	#halt 401 unless session?
	redirect '/login' unless session?
	@me_username = session[:username]
	### BEGIN ACL STRATEGY
	@me_acl_level = session[:acl_level]
	@is_admin = true if @me_username == "admin"
	@is_admin = true if @me_acl_level == 5
	@is_operator = true if @me_acl_level >= 3
	@is_user = true if @me_acl_level >= 1
	### END ACL STRATEGY
	@me_api_key = session[:api_key]
end

# BEFORE FILTER FOR API USAGE
before do
	content_type :json
	protect_strategy
end

# AUTH MODULE HELPER
module AuthorizationHelper
	def auth
		@auth ||= Rack::Auth::Basic::Request.new(request.env)
	end

	def unauthorized!(realm="mgcpxe.magic.fr")
		headers 'WWW-Authenticate' => %(Basic realm="#{realm}")
		throw :halt, [ 401, api_unauthorized ]
	end

	def bad_request!
		throw :halt, [ 400, 'Bad Request' ]
	end

	def authorized?
		request.env['REMOTE_USER']
	end

	def authorize(username, password)
		$users.any? {|user| user.api_key == username}
	end

	def protect_strategy
		return if authorized?
		unauthorized! unless auth.provided?
		bad_request! unless auth.basic?
		unauthorized! unless authorize(*auth.credentials)
		@me = $users.select {|user| user.api_key == auth.username}
		@me = @me.first
		@is_admin = true if @me.username == "admin"
		@is_admin = true if @me.acl_level == 5
		@is_operator = true if @me.acl_level >= 3
		@is_user = true if @me.acl_level >= 1
		request.env['REMOTE_USER'] = auth.username
	end

	def admin?
		authorized?
	end

	def check_acl_level(level)
		true
	end
end
</textarea>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<script>
         $(document).ready(function(){

             var editor_one = CodeMirror.fromTextArea(document.getElementById("code1"), {
                 lineNumbers: true,
                 matchBrackets: true,
                 styleActiveLine: true,
                 //theme:"ambiance",
		 readOnly: true

             });
        });
    </script>

